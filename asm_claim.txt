CLAIM                                                                                                                              
AUTHOR: Mihika
Roll Number: 2301CS31 

Declaration of Authorship
This text (txt extension) file, claims.txt, is part of the assignment of CS2102 at the department of Computer Science and Engineering, Indian Institute of Technology, Patna . 

****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
Files:

All the files I submitted, asm.cpp and emu.cpp, have my name and roll number at the start, along with a declaration of authorship.

I have uploaded asm.cpp , emu.cpp , bubble_sort.asm , product.asm, subtract.asm, sum.asm , swap.asm , test1.asm , test2.asm , test3.asm , test4.asm. Along with this i am also uploading the evidence for Assembler including the output files from all the test examples uploaded by me. 

All the test files have been tested and work properly. 


****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
Compilation instructions:
****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
    
Windows:
    g++ asm.cpp -o asmtest 
    using this command executable file "asmtest" will be generated.


****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
Program format and structure:
****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************

The assembler:
    
    * Written in C++ Language

    * Every instruction (including the SET instruction) is implemented.

    * It contains a table of instruction names and expected operands.

    * asm.cpp is the main and only file of my assembler

    * It is a 2-pass assembler (implemented in asm.cpp)
    
    * Outputs the required correct information in the form of 3 things :
       *  the errors and warnings on the terminal as well as the log file if not assembled properly.
       *  .l file for listing 
       *  .o file for machine code 

    * All important errors are diagnosed along with their line numbers ( unknown instruction, no such label, duplicate label )

    * Along with errors it also generates Warnings whenever there is a label declared but has not been used in the code.
  
    * Comments or self-descriptive variable names have been used.

    * Advanced Listing File gets generated that is bytes of instruction along with that instructions mnemonics .

    * The Assembler is capable of understanding the values given in decimal , octal or hexadecimal format.

    * SET instruction is also implemented. The breakage of SET into different instructions for implementation can be found in the code along with comments.

    * Assembler successfully skips empty lines and comments



****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
Testing: (using a windows machine)
****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
The assembler:

I have tested 9 examples(4 test files, sum , swap, product, subtract and bubble_sort) as shown below. The errors only occurred in the file test2.asm and the program immediately stopped on the second pass displaying errors in the terminal window.

The others were tested without any errors detected and produced listing file and machine readable object file, for each example.


1)
#Input: test1.asm
#Output: 
STATUS: Assembly completed successfully. No errors detected!
WARNING: Warning: HALT instruction missing.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Compiled without errors!!!
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2)
#Input: test2.asm
#Output: 
Failed to Assemble!!

Line      | Description
--------------------------------------------------
5         | Error at line: 4 -- Type: Multiple declaration of label: label
6         | Error at line: 5 -- Type: No such label / data variable
7         | Error at line: 6 -- Type: Invalid number
8         | Error at line: 7 -- Type: Invalid OPCode-Syntax combination
9         | Error at line: 8 -- Type: Invalid OPCode-Syntax combination
10        | Error at line: 9 -- Type: Invalid number
11        | Error at line: 10 -- Type: Invalid label name
12        | Error at line: 11 -- Type: Invalid Mnemonic
13        | Error at line: 12 -- Type: Invalid Mnemonic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logs generated in: logFile.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
****logs are getting generated by the name "logFile.txt" everytime because i have created folder so every testcase i took so in different folders we can have file named same in different folders. ****                                                                            

3)
#Input: test3.asm
#Output: 
STATUS: Assembly completed successfully. No errors detected!
WARNING: Warning: HALT instruction missing.
         A HALT instruction is required for proper termination. Please check if its omission was intentional.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compiled without errors!!!
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4)
#Input: test4.asm
#Output: 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compiled without errors!!!
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


5)
#Input: bubble_sort.asm
#Output: 
Assembly completed successfully. No errors detected!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compiled without errors!!!
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


6)
#Input: product.asm
#Output: 
Line      | Description
--------------------------------------------------
18        | Error at line: 17 -- Type: Invalid Mnemonic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

7)
#Input: subtract.asm
#Output: 

Line      | Description
--------------------------------------------------
4         | Error at line: 3 -- Type: Invalid OPCode-Syntax combination
6         | Error at line: 5 -- Type: Invalid OPCode-Syntax combination
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

8)
#Input: sum.asm
#Output: 
STATUS: Assembly completed successfully. No errors detected!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

9)
#Input: swap.asm
#Output: 
STATUS: Assembly completed successfully. No errors detected!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logs generated in: logFile.txt
Machine code generated in: machineCode.o
Listing generated in: listCode.l
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

